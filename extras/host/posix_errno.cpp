#include "extras/host/posix_errno.h"

#include <cerrno>
#include <cstring>
#include <string>

#include "absl/strings/str_cat.h"

namespace mcucore_host {
/*
List generated on Debian 5.18 with:

gcc -fdirectives-only -x c -E -include errno.h /dev/null | \
  grep -E '#\s*define\s+E' | \
  cut '-dE' -f2- | \
  cut '-d ' -f1 | \
  xargs -i  echo 'HANDLE_ERROR(E{});'

*/

const char* ErrnoToPlatformName(const int error_number) {
  // We don't use switch because some error numbers have multiple names.
#define HANDLE_ERROR(error_id) \
  if (error_number == error_id) return #error_id

  HANDLE_ERROR(EPERM);
  HANDLE_ERROR(ENOENT);
  HANDLE_ERROR(ESRCH);
  HANDLE_ERROR(EINTR);
  HANDLE_ERROR(EIO);
  HANDLE_ERROR(ENXIO);
  HANDLE_ERROR(E2BIG);
  HANDLE_ERROR(ENOEXEC);
  HANDLE_ERROR(EBADF);
  HANDLE_ERROR(ECHILD);
  HANDLE_ERROR(EAGAIN);
  HANDLE_ERROR(ENOMEM);
  HANDLE_ERROR(EACCES);
  HANDLE_ERROR(EFAULT);
  HANDLE_ERROR(ENOTBLK);
  HANDLE_ERROR(EBUSY);
  HANDLE_ERROR(EEXIST);
  HANDLE_ERROR(EXDEV);
  HANDLE_ERROR(ENODEV);
  HANDLE_ERROR(ENOTDIR);
  HANDLE_ERROR(EISDIR);
  HANDLE_ERROR(EINVAL);
  HANDLE_ERROR(ENFILE);
  HANDLE_ERROR(EMFILE);
  HANDLE_ERROR(ENOTTY);
  HANDLE_ERROR(ETXTBSY);
  HANDLE_ERROR(EFBIG);
  HANDLE_ERROR(ENOSPC);
  HANDLE_ERROR(ESPIPE);
  HANDLE_ERROR(EROFS);
  HANDLE_ERROR(EMLINK);
  HANDLE_ERROR(EPIPE);
  HANDLE_ERROR(EDOM);
  HANDLE_ERROR(ERANGE);
  HANDLE_ERROR(EDEADLK);
  HANDLE_ERROR(ENAMETOOLONG);
  HANDLE_ERROR(ENOLCK);
  HANDLE_ERROR(ENOSYS);
  HANDLE_ERROR(ENOTEMPTY);
  HANDLE_ERROR(ELOOP);
  HANDLE_ERROR(EWOULDBLOCK);
  HANDLE_ERROR(ENOMSG);
  HANDLE_ERROR(EIDRM);
  HANDLE_ERROR(ECHRNG);
  HANDLE_ERROR(EL2NSYNC);
  HANDLE_ERROR(EL3HLT);
  HANDLE_ERROR(EL3RST);
  HANDLE_ERROR(ELNRNG);
  HANDLE_ERROR(EUNATCH);
  HANDLE_ERROR(ENOCSI);
  HANDLE_ERROR(EL2HLT);
  HANDLE_ERROR(EBADE);
  HANDLE_ERROR(EBADR);
  HANDLE_ERROR(EXFULL);
  HANDLE_ERROR(ENOANO);
  HANDLE_ERROR(EBADRQC);
  HANDLE_ERROR(EBADSLT);
  HANDLE_ERROR(EDEADLOCK);
  HANDLE_ERROR(EBFONT);
  HANDLE_ERROR(ENOSTR);
  HANDLE_ERROR(ENODATA);
  HANDLE_ERROR(ETIME);
  HANDLE_ERROR(ENOSR);
  HANDLE_ERROR(ENONET);
  HANDLE_ERROR(ENOPKG);
  HANDLE_ERROR(EREMOTE);
  HANDLE_ERROR(ENOLINK);
  HANDLE_ERROR(EADV);
  HANDLE_ERROR(ESRMNT);
  HANDLE_ERROR(ECOMM);
  HANDLE_ERROR(EPROTO);
  HANDLE_ERROR(EMULTIHOP);
  HANDLE_ERROR(EDOTDOT);
  HANDLE_ERROR(EBADMSG);
  HANDLE_ERROR(EOVERFLOW);
  HANDLE_ERROR(ENOTUNIQ);
  HANDLE_ERROR(EBADFD);
  HANDLE_ERROR(EREMCHG);
  HANDLE_ERROR(ELIBACC);
  HANDLE_ERROR(ELIBBAD);
  HANDLE_ERROR(ELIBSCN);
  HANDLE_ERROR(ELIBMAX);
  HANDLE_ERROR(ELIBEXEC);
  HANDLE_ERROR(EILSEQ);
  HANDLE_ERROR(ERESTART);
  HANDLE_ERROR(ESTRPIPE);
  HANDLE_ERROR(EUSERS);
  HANDLE_ERROR(ENOTSOCK);
  HANDLE_ERROR(EDESTADDRREQ);
  HANDLE_ERROR(EMSGSIZE);
  HANDLE_ERROR(EPROTOTYPE);
  HANDLE_ERROR(ENOPROTOOPT);
  HANDLE_ERROR(EPROTONOSUPPORT);
  HANDLE_ERROR(ESOCKTNOSUPPORT);
  HANDLE_ERROR(EOPNOTSUPP);
  HANDLE_ERROR(EPFNOSUPPORT);
  HANDLE_ERROR(EAFNOSUPPORT);
  HANDLE_ERROR(EADDRINUSE);
  HANDLE_ERROR(EADDRNOTAVAIL);
  HANDLE_ERROR(ENETDOWN);
  HANDLE_ERROR(ENETUNREACH);
  HANDLE_ERROR(ENETRESET);
  HANDLE_ERROR(ECONNABORTED);
  HANDLE_ERROR(ECONNRESET);
  HANDLE_ERROR(ENOBUFS);
  HANDLE_ERROR(EISCONN);
  HANDLE_ERROR(ENOTCONN);
  HANDLE_ERROR(ESHUTDOWN);
  HANDLE_ERROR(ETOOMANYREFS);
  HANDLE_ERROR(ETIMEDOUT);
  HANDLE_ERROR(ECONNREFUSED);
  HANDLE_ERROR(EHOSTDOWN);
  HANDLE_ERROR(EHOSTUNREACH);
  HANDLE_ERROR(EALREADY);
  HANDLE_ERROR(EINPROGRESS);
  HANDLE_ERROR(ESTALE);
  HANDLE_ERROR(EUCLEAN);
  HANDLE_ERROR(ENOTNAM);
  HANDLE_ERROR(ENAVAIL);
  HANDLE_ERROR(EISNAM);
  HANDLE_ERROR(EREMOTEIO);
  HANDLE_ERROR(EDQUOT);
  HANDLE_ERROR(ENOMEDIUM);
  HANDLE_ERROR(EMEDIUMTYPE);
  HANDLE_ERROR(ECANCELED);
  HANDLE_ERROR(ENOKEY);
  HANDLE_ERROR(EKEYEXPIRED);
  HANDLE_ERROR(EKEYREVOKED);
  HANDLE_ERROR(EKEYREJECTED);
  HANDLE_ERROR(EOWNERDEAD);
  HANDLE_ERROR(ENOTRECOVERABLE);
  HANDLE_ERROR(ERFKILL);
  HANDLE_ERROR(EHWPOISON);
  HANDLE_ERROR(ENOTSUP);
  return nullptr;
}

std::string ErrnoToString(int error_number) {
  const char* name = ErrnoToPlatformName(error_number);
  const char* description = std::strerror(error_number);
  std::string error_string = "errno=";
  if (name != nullptr) {
    absl::StrAppend(&error_string, name, " (", error_number, ")");
  } else {
    absl::StrAppend(&error_string, error_number);
  }
  if (description != nullptr) {
    absl::StrAppend(&error_string, ", ", description);
  }
  return error_string;
}

}  // namespace mcucore_host
